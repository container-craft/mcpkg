/* AUTOGENERATED by mpgen — do not edit.
 * Source schema: {{ schema.path }}
 */
#ifndef MCPKG_MP_{{ macro_prefix_up }}_{{ macro_base_up }}_H
#define MCPKG_MP_{{ macro_prefix_up }}_{{ macro_base_up }}_H

#include <stdint.h>
#include <stddef.h>

#include "{{ include_prefix }}/mcpkg_export.h"
{% set need_strlist = fields | selectattr('kind','equalto','list_str') | list | length > 0 %}
{% set need_list    = fields | selectattr('kind','equalto','list_struct_bin') | list | length > 0 %}
{% if need_strlist %}
#include "{{ include_prefix }}/container/mcpkg_str_list.h"
{% endif %}
{% if need_list %}
#include "{{ include_prefix }}/container/mcpkg_list.h"
{% endif %}

#ifdef __cplusplus
extern "C" {
#endif

/* -------- schema id -------- */
#define MCPKG_MP_{{ macro_prefix_up }}_{{ macro_base_up }}_TAG "{{ tag }}"
#define MCPKG_MP_{{ macro_prefix_up }}_{{ macro_base_up }}_VER {{ version }}

/* -------- forward declarations for nested structs (pointer fields) -------- */
{% for f in fields if f.kind in ['struct_bin','list_struct_bin'] -%}
struct {{ f.ref_struct }};
{% endfor %}

/* -------- struct definition -------- */
struct {{ c_struct }} {
{% for f in fields %}
    /* key {{ f.key }} — {{ f.kind }} {{ f|field_macro }}{% if f.required %} (required){% endif %} */
    {%- if f.kind == 'scalar' and f.ftype == 'str' -%}
    char *{{ f.name }};
    {%- elif f.kind == 'scalar' and f.ftype == 'i32' -%}
    int32_t {{ f.name }};
    {%- elif f.kind == 'scalar' and f.ftype == 'u32' -%}
    uint32_t {{ f.name }};
    {%- elif f.kind == 'scalar' and f.ftype == 'i64' -%}
    int64_t {{ f.name }};
    {%- elif f.kind == 'scalar' and f.ftype == 'bin' -%}
    uint8_t {{ f.name }}[{{ f.size|default(0) }}];
    {%- elif f.kind == 'list_str' -%}
    McPkgStringList *{{ f.name }};
    {%- elif f.kind == 'struct_bin' -%}
    struct {{ f.ref_struct }} *{{ f.name }};
    {%- elif f.kind == 'list_struct_bin' -%}
    McPkgList *{{ f.name }}; /* list of struct {{ f.ref_struct }}* */
    {%- endif -%}
{% endfor %}
};

/* -------- lifetime -------- */
MCPKG_API struct {{ c_struct }} *mcpkg_mp_{{ out_base }}_new(void);
MCPKG_API void mcpkg_mp_{{ out_base }}_free(struct {{ c_struct }} *p);

/* -------- pack/unpack -------- */
MCPKG_API int mcpkg_mp_{{ out_base }}_pack(const struct {{ c_struct }} *p,
                                           void **out_buf, size_t *out_len);
MCPKG_API int mcpkg_mp_{{ out_base }}_unpack(const void *buf, size_t len,
                                             struct {{ c_struct }} *out);

/* -------- debug -------- */
MCPKG_API char *mcpkg_mp_{{ out_base }}_debug_str(const struct {{ c_struct }} *p);

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* MCPKG_MP_{{ macro_prefix_up }}_{{ macro_base_up }}_H */
